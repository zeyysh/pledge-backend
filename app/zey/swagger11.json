{
  "swagger": "2.0",
  "info": {
    "description": "Pledge.\n",
    "version": "1.0.0",
    "title": "Swagger Pledge",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/zeyysh/test/1.0.0",
  "tags": [
    {
      "name": "user",
      "description": "user profile information"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get current user information",
        "description": "Get the information of current user",
        "operationId": "theUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "The user token from login",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/currentUserInfo"
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid or empty auth token."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register new user",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "reg",
            "required": false,
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful registration operation"
          },
          "400": {
            "description": "Bad request. Invalid or empty auth token."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Not found"
          },
          "405": {
            "description": "Invalid input"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/user/{tel}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Send the tel verification code",
        "operationId": "sendVerification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tel",
            "in": "path",
            "description": "Send the user phone number to send the verification code (SMS)",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Verification code is sent."
          },
          "400": {
            "description": "Bad request. check the `tel` parameter. It has be a number."
          },
          "405": {
            "description": "Invalid input. It has be a number."
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "currentUserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Jennifer Smith"
        },
        "email": {
          "type": "string",
          "example": "jsmith@creative.com"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "workplace": {
          "type": "string",
          "example": "Dallas, Texas"
        },
        "networks": {
          "type": "integer",
          "format": "int64"
        },
        "biography": {
          "type": "string",
          "example": "Dallas, Texas"
        },
        "photoUrls": {
          "type": "string"
        }
      }
    },
    "register": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Jennifer"
        },
        "lastName": {
          "type": "string",
          "example": "Smith"
        },
        "email": {
          "type": "string",
          "example": "jsmith@creative.com"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "verificationCode": {
          "type": "string"
        },
        "terms": {
          "type": "boolean"
        }
      }
    }
  }
}